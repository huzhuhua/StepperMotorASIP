/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("LEDG")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("LEDG[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "LEDG";
}

SIGNAL("LEDG[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "LEDG";
}

SIGNAL("LEDG[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "LEDG";
}

SIGNAL("LEDG[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "LEDG";
}

SIGNAL("state")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("state[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("state[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("state[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("state[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("state[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("state[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "state";
}

SIGNAL("stepper_signals")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("stepper_signals[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stepper_signals";
}

SIGNAL("stepper_signals[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stepper_signals";
}

SIGNAL("stepper_signals[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stepper_signals";
}

SIGNAL("stepper_signals[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stepper_signals";
}

SIGNAL("test_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out";
}

SIGNAL("test_out1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out1[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out1";
}

SIGNAL("test_out2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out2[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out2[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out2";
}

SIGNAL("test_out3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out3[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out3[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out3";
}

SIGNAL("test_out4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out4[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out4[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out4";
}

SIGNAL("test_out5")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("test_out5[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("test_out5[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "test_out5";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("reset_n")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("LEDG[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 13.5;
	}
}

TRANSITION_LIST("LEDG[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 29.5;
		LEVEL 1 FOR 9.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 49.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 1.5;
	}
}

TRANSITION_LIST("LEDG[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		LEVEL 1 FOR 29.0;
		LEVEL 0 FOR 33.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 35.0;
		}
		LEVEL 1 FOR 132.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 36.0;
			LEVEL 1 FOR 12.0;
		}
		LEVEL 0 FOR 25.5;
	}
}

TRANSITION_LIST("LEDG[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 38.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 156.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 1.5;
	}
}

TRANSITION_LIST("state[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("state[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28.5;
		LEVEL 1 FOR 8.0;
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 11.0;
			}
			LEVEL 0 FOR 14.0;
			LEVEL 1 FOR 10.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 8.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 9.0;
		}
		LEVEL 0 FOR 19.0;
		NODE
		{
			REPEAT = 22;
			LEVEL 1 FOR 11.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("state[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 5.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 4;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 14.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 22;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("state[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 22;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("state[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 22;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("state[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
			LEVEL 1 FOR 2.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 1.0;
			}
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 9.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 22;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("stepper_signals[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 13.5;
	}
}

TRANSITION_LIST("stepper_signals[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 29.5;
		LEVEL 1 FOR 9.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 49.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 1.5;
	}
}

TRANSITION_LIST("stepper_signals[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		LEVEL 1 FOR 29.0;
		LEVEL 0 FOR 33.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 35.0;
		}
		LEVEL 1 FOR 132.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 36.0;
			LEVEL 1 FOR 12.0;
		}
		LEVEL 0 FOR 25.5;
	}
}

TRANSITION_LIST("stepper_signals[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 38.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 156.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 1.5;
	}
}

TRANSITION_LIST("test_out[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 25.5;
		LEVEL 1 FOR 49.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 57.0;
		}
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 98.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 269.5;
	}
}

TRANSITION_LIST("test_out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		LEVEL 1 FOR 74.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 9.0;
			LEVEL 1 FOR 51.0;
		}
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 379.5;
	}
}

TRANSITION_LIST("test_out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 52.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 6.0;
			LEVEL 0 FOR 54.0;
		}
		LEVEL 1 FOR 101.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 272.5;
	}
}

TRANSITION_LIST("test_out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 61.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 57.0;
		}
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 275.5;
	}
}

TRANSITION_LIST("test_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 57.0;
		}
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 269.5;
	}
}

TRANSITION_LIST("test_out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 52.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 57.0;
		}
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 269.5;
	}
}

TRANSITION_LIST("test_out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 52.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 57.0;
		}
		LEVEL 1 FOR 98.0;
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 269.5;
	}
}

TRANSITION_LIST("test_out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 49.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 6.0;
			LEVEL 1 FOR 54.0;
		}
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 269.5;
	}
}

TRANSITION_LIST("test_out1[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out1[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 9.5;
		LEVEL 1 FOR 990.5;
	}
}

TRANSITION_LIST("test_out2[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 732.5;
		LEVEL 1 FOR 267.5;
	}
}

TRANSITION_LIST("test_out2[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 732.5;
		LEVEL 1 FOR 267.5;
	}
}

TRANSITION_LIST("test_out2[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 865.5;
		LEVEL 1 FOR 134.5;
	}
}

TRANSITION_LIST("test_out2[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 732.5;
		LEVEL 1 FOR 133.0;
		LEVEL 0 FOR 134.5;
	}
}

TRANSITION_LIST("test_out2[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 769.5;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 38.5;
	}
}

TRANSITION_LIST("test_out2[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 27.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 57.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 59.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 166.0;
		LEVEL 1 FOR 37.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 48.0;
			LEVEL 1 FOR 48.0;
		}
		LEVEL 0 FOR 38.5;
	}
}

TRANSITION_LIST("test_out2[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28.5;
		LEVEL 1 FOR 21.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 37.0;
			LEVEL 1 FOR 23.0;
		}
		LEVEL 0 FOR 156.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 24.0;
			LEVEL 0 FOR 24.0;
		}
		LEVEL 1 FOR 14.5;
	}
}

TRANSITION_LIST("test_out2[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28.5;
		LEVEL 1 FOR 9.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 12.0;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 11;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 12.0;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("test_out3[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 720.5;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 273.5;
	}
}

TRANSITION_LIST("test_out3[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 720.5;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 270.5;
	}
}

TRANSITION_LIST("test_out3[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out3[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 720.5;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 270.5;
	}
}

TRANSITION_LIST("test_out3[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 24.5;
		LEVEL 1 FOR 172.0;
		LEVEL 0 FOR 533.0;
		LEVEL 1 FOR 270.5;
	}
}

TRANSITION_LIST("test_out3[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 9.0;
		LEVEL 0 FOR 175.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 284.0;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 273.5;
	}
}

TRANSITION_LIST("test_out3[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 24.5;
		LEVEL 1 FOR 52.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 120.0;
		}
		LEVEL 0 FOR 173.0;
		LEVEL 1 FOR 270.5;
	}
}

TRANSITION_LIST("test_out3[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 6.5;
		LEVEL 1 FOR 6.0;
		LEVEL 0 FOR 64.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 383.5;
	}
}

TRANSITION_LIST("test_out4[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out4[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 481.5;
		LEVEL 1 FOR 348.0;
		LEVEL 0 FOR 170.5;
	}
}

TRANSITION_LIST("test_out4[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 241.5;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 348.0;
		LEVEL 1 FOR 170.5;
	}
}

TRANSITION_LIST("test_out4[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 121.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 120.0;
		}
		LEVEL 1 FOR 132.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 74.5;
	}
}

TRANSITION_LIST("test_out4[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 48.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 26.5;
	}
}

TRANSITION_LIST("test_out4[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 37.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 24.0;
			LEVEL 0 FOR 36.0;
		}
		LEVEL 1 FOR 24.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 24.0;
			LEVEL 0 FOR 24.0;
		}
		LEVEL 1 FOR 24.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("test_out4[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28.5;
		LEVEL 1 FOR 9.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 12.0;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 11.0;
		}
		LEVEL 0 FOR 12.0;
		LEVEL 1 FOR 12.0;
		LEVEL 0 FOR 132.0;
		NODE
		{
			REPEAT = 11;
			LEVEL 1 FOR 12.0;
			LEVEL 0 FOR 12.0;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("test_out4[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("test_out5[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 719.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 276.5;
	}
}

TRANSITION_LIST("test_out5[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 480.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 24.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 10.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 118.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 182.5;
	}
}

TRANSITION_LIST("test_out5[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 240.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 24.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 10.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 359.0;
		NODE
		{
			REPEAT = 14;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("test_out5[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 131.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 131.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 118.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 99.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 86.5;
	}
}

TRANSITION_LIST("test_out5[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 23.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 36.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 26.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 44.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 24.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 71.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 24.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 139.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 11.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 59.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 38.5;
	}
}

TRANSITION_LIST("test_out5[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 11.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 18.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 47.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 26.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 47.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 9.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 35.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 14.5;
	}
}

TRANSITION_LIST("test_out5[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 23.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 36.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 22.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 26.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 9.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 22.0;
			}
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 36.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 22.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 139.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 11;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 23.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("test_out5[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 66.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 119.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 443.5;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000;
			LEVEL 0 FOR 0.5;
			LEVEL 1 FOR 0.5;
		}
	}
}

TRANSITION_LIST("reset_n")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "LEDG";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "LEDG[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "LEDG[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "LEDG[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "LEDG[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "reset_n";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
	CHILDREN = 8, 9, 10, 11, 12, 13;
}

DISPLAY_LINE
{
	CHANNEL = "state[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "state[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "state[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "state[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "state[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "state[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "stepper_signals";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "stepper_signals[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "stepper_signals[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "stepper_signals[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "stepper_signals[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "test_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
	CHILDREN = 29, 30, 31, 32, 33, 34, 35, 36;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 0;
	CHILDREN = 38, 39, 40, 41, 42, 43, 44, 45;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out2[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 46;
	TREE_LEVEL = 0;
	CHILDREN = 47, 48, 49, 50, 51, 52, 53, 54;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 47;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 51;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 52;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 53;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out3[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 54;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 55;
	TREE_LEVEL = 0;
	CHILDREN = 56, 57, 58, 59, 60, 61, 62, 63;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 56;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 57;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 58;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 59;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 60;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 61;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 62;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out4[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 63;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 64;
	TREE_LEVEL = 0;
	CHILDREN = 65, 66, 67, 68, 69, 70, 71, 72;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 65;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 66;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 67;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 68;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 69;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 70;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 71;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "test_out5[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 72;
	TREE_LEVEL = 1;
	PARENT = 64;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
