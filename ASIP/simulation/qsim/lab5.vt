// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2018 21:15:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset_n;
// wires                                               
wire [3:0] LEDG;
wire [5:0] state;
wire [3:0] stepper_signals;
wire [7:0] test_out;
wire [7:0] test_out1;
wire [7:0] test_out2;
wire [7:0] test_out3;
wire [7:0] test_out4;
wire [7:0] test_out5;

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.LEDG(LEDG),
	.clk(clk),
	.reset_n(reset_n),
	.state(state),
	.stepper_signals(stepper_signals),
	.test_out(test_out),
	.test_out1(test_out1),
	.test_out2(test_out2),
	.test_out3(test_out3),
	.test_out4(test_out4),
	.test_out5(test_out5)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

